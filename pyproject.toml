[build-system]
requires = ["setuptools==68.0.0", "wheel==0.40.0"]
build-backend = "setuptools.build_meta"

[project]
name        = "aiounifi"
version     = "63"
license     = {text = "MIT"}
description = "Python library for communicating with UniFi Network Controller API"
readme      = "README.md"
authors     = [{name = "Robert Svensson", email = "Kane610@users.noreply.github.com"}]
keywords    = ["unifi", "homeassistant"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Topic :: Home Automation",
]
requires-python = ">=3.11.0"
dependencies    = [
    "aiohttp>3.8",
    "orjson>3.9",
    "segno>=1.5.2",
]

[project.optional-dependencies]
requirements = [
    "aiohttp~=3.8.5",
    "orjson~=3.9.5",
    "segno==1.5.2",
]
requirements_test = [
    "aioresponses==0.7.4",
    "black==23.9.1",
    "mypy==1.5.1",
    "pytest==7.4.2",
    "pytest-aiohttp==1.0.5",
    "pytest-asyncio==0.21.1",
    "pytest-cov==4.1.0",
    "ruff==0.0.290",
    "trustme==1.1.0",
    "types-orjson==3.6.2",
]
requirements_dev = [
    "pre-commit==3.4.0"
]

[project.urls]
"Source Code" = "https://github.com/Kane610/aiounifi"
"Bug Reports" = "https://github.com/Kane610/aiounifi/issues"
"Forum" = "https://community.home-assistant.io/t/unifi-network-integration-official-thread/"

[project.scripts]
aiounifi = "aiounifi.__main__:main"

[tool.coverage.report]
fail_under = 95
exclude_also = [
    "if TYPE_CHECKING:"
]

[tool.setuptools.packages.find]
include = ["aiounifi*"]

[tool.setuptools.package-data]
"aiounifi" = ["py.typed"]

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true
warn_redundant_casts = true
warn_return_any = true
warn_unreachable = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pytest.ini_options]
addopts = "--cov=aiounifi --cov-report term-missing"
asyncio_mode = "auto"
log_cli = false
log_cli_level = "DEBUG"
testpaths = ["tests"]

[tool.ruff]
src = ["aiounifi", "tests"]
target-version = "py311"

select = [
    "B002",  # Python does not support the unary prefix increment
    "B007",  # Loop control variable {name} not used within loop body
    "B014",  # Exception handler with duplicate exception
    "B023",  # Function definition does not bind loop variable {name}
    "B026",  # Star-arg unpacking after a keyword argument is strongly discouraged
    "C",       # complexity
    "COM818",  # Trailing comma on bare tuple prohibited
    "D",  # docstrings
    "E",  # pycodestyle
    "F",  # pyflakes/autoflake
    "G",  # flake8-logging-format
    "I",  # isort
    "ICN001",  # import concentions; {name} should be imported as {asname}
    "ISC001",  # Implicitly concatenated string literals on one line
    "N804",    # First argument of a class method should be named cls
    "N805",    # First argument of a method should be named self
    "N815",    # Variable {name} in class scope should not be mixedCase
    "PGH001",  # No builtin eval() allowed
    "PGH004",   # Use specific rule codes when using noqa
    "PLC0414",  # Useless import alias. Import alias does not rename original package.
    "PLC",  # pylint
    "PLE",  # pylint
    "PLR",  # pylint
    "PLW",  # pylint
    "RUF006",  # Store a reference to the return value of asyncio.create_task
    "SIM105",  # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM117",  # Merge with-statements that use the same scope
    "SIM118",  # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM201",  # Use {left} != {right} instead of not {left} == {right}
    "SIM208",  # Use {expr} instead of not (not {expr})
    "SIM212",  # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
    "SIM300",  # Yoda conditions. Use 'age == 42' instead of '42 == age'.
    "SIM401",  # Use get from dict with default instead of an if block
    "T100",  # Trace found: {name} used
    "T20",   # flake8-print
    "UP",  # pyupgrade
    "W",   # pycodestyle
]

ignore = [
    "D202",  # No blank lines allowed after function docstring
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    "PLR0913",  # Too many arguments to function call ({c_args} > {max_args})
    "PLR0915",  # Too many statements ({statements} > {max_statements})
    "PLR2004",  # Magic value used in comparison, consider replacing {value} with a constant variable
]

[tool.ruff.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.isort]
force-sort-within-sections = true
known-first-party = ["aiounifi"]
combine-as-imports = true
split-on-trailing-comma = false

[tool.ruff.mccabe]
max-complexity = 12